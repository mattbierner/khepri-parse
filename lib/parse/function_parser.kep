/**
 * @fileOverview Khepri function parser.
 */
package (
    argumentList
    namedArgumentList
    argumentsPattern
    functionExpression)
with
    import 'bennu::parse' {
        attempt
        bind
        binds
        choice
        eager
        either
        enumeration
        expected
        next
        optional
        late
        label},
    import 'bennu::lang' {
        between
        sepBy
        sepBy1
        then},
    
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::pattern' ast_pattern,
    
    import './common' {node nodea},
    import './token_parser' {
        keyword
        punctuator
        infixOperator},
    import './value_parser' {identifier},
    import './pattern_parser' {
        topLevelPattern
        listPattern0
        ellipsisPattern
        unpack
        identifierPattern},
    
    import './expression_parser' _
in {

/* Circular Declarations 
 ******************************************************************************/
var blockStatement = late \->
    with import './statement_parser' {blockStatement} in {
        return blockStatement;
    };

var withStatement = late \->
    with import './statement_parser' {withStatement} in {
        return withStatement;
    };

var tryStatement = late \->
    with import './statement_parser' {tryStatement} in {
        return tryStatement;
    };

var expression = late \->
    with import './expression_parser' {expression} in {
        return expression;
    };

/* Arguments Pattern
 ******************************************************************************/
var argumentElements = let
    element = topLevelPattern
in
    eager listPattern0(
        element |> expected@"pattern",
        ellipsisPattern,
        element |> expected@"non-ellipsis pattern");

var selfPattern :=
    next(
        punctuator '=',
        unpack);

argumentList = label@'Argument List' <|
    nodea(
        enumeration(
            argumentElements,
            optional selfPattern),
        \loc elements self ->
            ast_pattern.ArgumentsPattern.create(loc, null, elements, self));

namedArgumentList = label@'Named Argument List' <| let
    elements =
        between(punctuator '(', punctuator ')',
            argumentElements)
in
    nodea(
        next(
            infixOperator '-',
            enumeration(
                optional identifierPattern,
                elements,
                optional selfPattern)),
        ast_pattern.ArgumentsPattern.create);

argumentsPattern = label@'Arguments Pattern' <|
    either(
        namedArgumentList,
        argumentList);

/* Function Expression
 ******************************************************************************/
functionExpression = label@'Function Expression' <| let
    functionName =
        optional next(
            keyword 'function',
            optional identifier),
    
    functionBody =
        choice(
            blockStatement,
            withStatement,
            tryStatement,
            expression)
in
    nodea(
        enumeration(
            functionName,
            next(
                punctuator '\\',
                argumentsPattern),
            next(
                punctuator '->',
                functionBody |> expected@"function body")),
        ast_expression.FunctionExpression.create);

}