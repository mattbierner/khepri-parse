/**
 * @fileOverview 
 */
package (
    sepEndWith1
    sepEndWith
    sepEndWith0
        
    precedence
    node
    nodea
    positionParser)
with
    import 'bennu::parse' parse#{
        always
        bind
        binds
        cons
        either
        enumeration
        extract
        eager
        optional
        next
        rec},
    import 'nu-stream::stream' stream#{NIL},

    import 'khepri-ast::position' {SourceLocation}
in {

/* Parser Combinators
 ******************************************************************************/
sepEndWith1 := \sep end p ->
    rec\self ->
        cons(
            p,
            optional(NIL,
                next(sep,
                    either(enumeration(end), self))));

sepEndWith := \sep end p ->
    either(
        enumeration(end),
        sepEndWith1(sep, end, p));

sepEndWith0 := sepEndWith \>> optional@NIL;

/* 
 ******************************************************************************/
var pres := \list -> {
    var stack = [],
        out = [];
    
    while (list.length > 0) {
        var tok = list.shift();
        if (tok.type) {
            out.push(tok);
        } else {
            while (stack.length > 0)
            with
                o2 = stack.(stack.length - 1)
            in {
                if ((!tok.right && o2.precedence === tok.precedence) ||
                  (o2.precedence < tok.precedence)) {
                    stack.pop();
                    with
                        rt = out.pop(),
                        lf = out.pop()
                    in {
                        out.push(o2.node(
                            SourceLocation.merge(lf.loc, rt.loc),
                            o2.value,
                            lf,
                            rt));
                    }
                } else {
                    break;
                }
            }
            stack.push(tok);
        }
    }
    
    while (stack.length > 0)
    with
        o = stack.pop(),
        rt = out.pop(),
        lf = out.pop()
    in {
        out.push(o.node(
            SourceLocation.merge(lf.loc, rt.loc),
            o.value,
            lf,
            rt));
    }
    return out.pop();
};

// Operator Precedence
////////////////////////////////////////
precedence = \p table -> let
    sep =
        parse.choicea <|
            table.map \ entry ->
                entry.sep.map \ value -> ({
                    value: value,
                    node: entry.node,
                    precedence: entry.precedence,
                    right: entry.right
                })
in
    eager(parse.rec\self ->
        parse.cons(p,
            optional(NIL,
                parse.cons(sep,
                    parse.expected("binary expression", self)))))
            .map(pres);

// State Interaction
////////////////////////////////////////
positionParser := extract (.position.sourcePosition);

var prevEnd := extract (.position.prevEnd);

var loc := \p ->
    enumeration(
        positionParser,
        p,
        prevEnd);

// Ast Node
////////////////////////////////////////
/**
 * Helper function that parses `p` and its location, calling `f` with loc and
 * result of `p`.
 */
node := \p f ->
    binds(
        loc p,
        \o x c ->
            always <| f(new SourceLocation(o, c), x));

/**
 * Helper function that parses stream parser `p` and its location, calling
 * `f` with loc and results of `p`.
 */
nodea := \p f ->
    node(p, \loc x ->
        f <<| stream.toArray(stream.cons(loc, x)));

}